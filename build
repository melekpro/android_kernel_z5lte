#!/bin/bash

#
# Copyright (C) 2018 Yuvraj Saxena (frap130)
#

# Script To Compile Kernels

# Colors
ORNG=$'\033[0;33m'
CYN=$'\033[0;36m'
PURP=$'\033[0;35m'
BLINK_RED=$'\033[05;31m'
BLUE=$'\033[01;34m'
BLD=$'\033[1m'
GRN=$'\033[01;32m'
RED=$'\033[01;31m'
RST=$'\033[0m'
YLW=$'\033[01;33m'

function banner() {
clear
echo -e "${BLD}${CYN} MADE BY YUVRAJ SAXENA (AKA: frap130)"
echo
echo -e "${GRN}================================================================================================"
echo
echo -e "${BLD}${ORNG}"
echo -e "${BLD}${ORNG}                       88   eeee  eeeeee"
echo -e "${BLD}${ORNG}eeee eeeee  eeeee eeeee 8      8  8    8"
echo -e "${BLD}${ORNG}8    8   8  8   8 8   8 8      8  8    8"
echo -e "${BLD}${ORNG}8eee 8eee8e 8eee8 8eee8 8   eee8  8    8"
echo -e "${BLD}${ORNG}88   88   8 88  8 88   8888    88 8    8"
echo -e "${BLD}${ORNG}88   88   8 88  8 88   8888 eee88 8eeee8"
echo
echo -e "${PURP}================================================================================================"
echo
sleep 1
clear
}

function BINFO() {
   BNAME="YUVRAJ SAXENA"
   BNICK="frap130"
   echo -e "${BLD}${CYN} MADE BY ${BNAME} (AKA: ${BNICK})"
   export KBUILD_BUILD_USER=Yuvraj
   export KBUILD_BUILD_HOST=âˆ†Thestral
}

function TOOLCHAIN() {
if [[ ! -d linaro ]];
then
    echo -e "${RED}####################################"
    echo -e "${CYN}#       TOOLCHAIN NOT FOUND!       #"
    echo -e "${YLW}####################################"
clear
    echo -e "${YLW}####################################"
    echo -e "${GRN}#       CLONING TOOLCHAIN          #"
    echo -e "####################################"
    git clone -q https://github.com/frap130/linaro-5.5.0.git linaro
    export ARCH=arm CROSS_COMPILE=$PWD/linaro/bin/arm-linux-gnueabi-
else
    export ARCH=arm CROSS_COMPILE=$PWD/linaro/bin/arm-linux-gnueabi-
fi
}

function BUILD() {
    mkdir -p out
    echo -e "${PURP} READING DEFCONFIG..."
    make z5lte_defconfig O=out/ &>> defconfig.log
clear
    echo -e "${YLW} BUILDING KERNEL..." 
    make -j4 O=out/ &>> Kernel.log
    KIMAGE=out/arch/arm/boot/zImage-dtb
}

function transfer() {
    file="$1"
    zipname=$(echo "${file}" | awk -F '/' '{print $NF}')
    destination="$2"
    url=$(curl -# -T "${file}" https://transfer.sh/${destination})
    printf '\n'
    echo -e "Download $zipname at $url"
}

function format_time() {
    MINS=$(((${1}-${2})/60))
    SECS=$(((${1}-${2})%60))
    if [[ ${MINS} -ge 60 ]]; then
        HOURS=$((${MINS}/60))
        MINS=$((${MINS}%60))
    fi

    if [[ ${HOURS} -eq 1 ]]; then
        TIME_STRING+="1 HOUR, "
    elif [[ ${HOURS} -ge 2 ]]; then
        TIME_STRING+="${HOURS} HOURS, "
    fi

    if [[ ${MINS} -eq 1 ]]; then
        TIME_STRING+="1 MINUTE"
    else
        TIME_STRING+="${MINS} MINUTES"
    fi

    if [[ ${SECS} -eq 1 && -n ${HOURS} ]]; then
        TIME_STRING+=", AND 1 SECOND"
    elif [[ ${SECS} -eq 1 && -z ${HOURS} ]]; then
        TIME_STRING+=" AND 1 SECOND"
    elif [[ ${SECS} -ne 1 && -n ${HOURS} ]]; then
        TIME_STRING+=", AND ${SECS} SECONDS"
    elif [[ ${SECS} -ne 1 && -z ${HOURS} ]]; then
        TIME_STRING+=" AND ${SECS} SECONDS"
    fi

    echo ${TIME_STRING}
}

function CHECK() {
if [[ ! -e ${KIMAGE} ]];
then
    echo -e "${RED}############################"
    echo -e "${RED}#        BUILD ERROR!      #"
    echo -e "${RED}############################"
    echo -e "${CYN}#       Uploading Logs     #"
    echo -e "${RED}############################"
    clear
    transfer Kernel.log
else
    echo -e "${GRN} #####################################"
    echo -e "${GRN} #                                   #"
    echo -e "${GRN} #  SUCCESSFULLY BUILDED KERNEL      #"
    echo -e "${GRN} #        -BY FRAP130                #"
    echo -e "${GRN} #                                   #"
    echo -e "${GRN} #####################################"
    echo -e "${ORNG} #  uploading Kernel                #"
    echo -e "${ORNG} #####################################"
    mv ${KIMAGE} Kernel
    zip -r Kernel.zip Kernel
clear
    transfer Kernel.zip
fi
}

function CLEAN() {
clear
    echo -e "${GRN}#        Cleaning Tree!      #"
    make clean >/dev/null
    make mrproper >/dev/null
clear
}

function HELP() {
	echo -e "${YLW}options:"
	echo -e "${YLW}  -h, --help     display this help message"
	echo -e "${YLW}  -c, --clean    clean tree before building"
	echo -e "${YLW}  -b, --build    build Kernel"
        read junk
}

function PARAMS() {
params="${*}"
while [[ ${#} -ge 1 ]]; do
	case ${1} in
		"-h"|"--help")
			Help=y
			;;
		"-c"|"--clean")
			CLEAN_TREE=y
			;;
		"-b"|"--build")
			BUILD_KERNEL=y
			;;
		*)
			echo -e "${RED}warning: not enough parameters specified"
			;;
		esac
		shift
done
}

PARAMS "${@}"

if [[ "${BUILD_KERNEL}" = 'y' ]]; then
clear
banner
clear
START=$(date +"%s")
TOOLCHAIN
clear
sleep 0.5
BINFO
sleep 0.5
BUILD
CHECK
END=$(date +%s)
TIME_STRING="$(format_time "${START}" "${END}")"
echo -e "${GRN}Completed In: ${TIME_STRING}"
fi

if [[ "${CLEAN_TREE}" = 'y' ]]; then
clear
CLEAN
fi

if [[ "${Help}" = 'y' ]]; then
clear
HELP
fi
